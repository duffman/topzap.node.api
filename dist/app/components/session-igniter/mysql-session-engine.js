'use strict';Object.defineProperty(exports,'__esModule',{value:true});const sql_string_1=require('../../../lib/putte-db/dynsql/sql-string');const db_kernel_1=require('../../../lib/putte-db/db-kernel');const cli_logger_1=require('../../cli/cli.logger');const cli_debug_yield_1=require('../../cli/cli.debug-yield');const session_igniter_entry_1=require('./session-igniter-entry');class MysqlSessionEngine{constructor(){this.tableName='session_storage';this.dataColumn='data';this.db=new db_kernel_1.DbManager();}createEntry(sessId){return this.setData(sessId,new session_igniter_entry_1.SessionEntry(sessId));}getData(sessId,autoCreate=true){const sql=`SELECT name, ${this.dataColumn} FROM ${this.tableName} WHERE name='${sessId}'`;return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(res=>{if(!res.haveAny()&&autoCreate){return this.createEntry(sessId);}else if(!res.haveAny()&&!autoCreate){resolve(null);}else{let row=res.safeGetFirstRow();let dataStr=row.getValAsStr(this.dataColumn);let jsonObj=JSON.parse(dataStr);let entry=new session_igniter_entry_1.SessionEntry(sessId,jsonObj.data);resolve(entry);}}).then(res=>{resolve(res);}).catch(err=>{const errMess='MysqlSessionEngine :: getData :: ERROR ::';cli_logger_1.Logger.logFatalError(errMess,err);cli_debug_yield_1.CliDebugYield.fatalError(errMess,err);reject(err);});});}getDataStr(sessId){throw new Error('Not implemented');}setEntry(sessId,data){return this.setData(sessId,data.data);}setData(sessId,data){function isSessionEntry(obj){let result=false;let objType=typeof obj;if(objType==='object'){result=obj.hasOwnProperty('id')&&obj.hasOwnProperty('data');}return result;}let entry;if(!isSessionEntry(data)){entry=new session_igniter_entry_1.SessionEntry(sessId,data);}else{entry=data;}const dataStr=sql_string_1.default.escape(entry);const sql=`REPLACE INTO session_storage (id, name, data, data_type) VALUES (NULL, '${sessId}', '${dataStr}', NULL)`;return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(res=>{if(res.success){resolve(entry);}else{resolve(null);}}).catch(err=>{const errMess='MysqlSessionEngine :: setData :: ERROR ::';cli_logger_1.Logger.logFatalError(errMess,err);cli_debug_yield_1.CliDebugYield.fatalError(errMess,err);reject(err);});});}}exports.MysqlSessionEngine=MysqlSessionEngine;