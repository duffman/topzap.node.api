'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const cli_logger_1=require('../../cli/cli.logger');const session_pull_result_1=require('../../models/zap-ts-models/session-pull-result');const api_routes_1=require('../../api/api-routes');const basket_item_model_1=require('../../models/zap-ts-models/basket-item.model');const basket_model_1=require('../../models/zap-ts-models/basket.model');const basket_add_result_1=require('../../models/zap-ts-models/basket-add-result');const basket_collection_1=require('../../models/zap-ts-models/basket-collection');const zap_basket_model_1=require('../../models/zap-ts-models/zap-basket.model');const price_search_service_1=require('../../core/price-search-engine/price.search-service');const zappy_app_settings_1=require('../../zappy.app.settings');const controller_utils_1=require('../../api/controller.utils');const product_api_controller_1=require('../../api/product-api.controller');const prand_num_1=require('../../../lib/putte-ts/prand-num');const pvar_utils_1=require('../../../lib/putte-ts/pvar-utils');const zap_message_types_1=require('../../models/zap-ts-models/zap-message-types');const phttp_client_1=require('../../../lib/putte-ts/inet/phttp-client');class BasketApiController{constructor(debugMode=false){this.debugMode=debugMode;this.searchService=new price_search_service_1.PriceSearchService(null);}echoDebug(){for(let i=0;i<this.sessionBasket.data.length;i++){let basket=this.sessionBasket.data[i];console.log('Vendor :: '+basket.vendorId,basket.items);}}getSessionBasket(){try{if(this.reqSession.sessionBasket){this.sessionBasket=this.reqSession.sessionBasket;console.log('SESSION BASKET ::',this.sessionBasket);}else{this.reqSession.sessionBasket=new basket_collection_1.SessionBasket();this.sessionBasket=this.reqSession.sessionBasket;}return this.sessionBasket;}catch(ex){return null;}}setSessionBasket(basket=null){let result=false;try{if(basket===null){basket=this.sessionBasket;}this.reqSession.sessionBasket=basket;result=true;}catch(err){console.log('setSessionBasket :: err ::',err);result=false;}return result;}validateSessionBasket(sessionBasket=null){let result=false;let basketSess=this.getSessionBasket();result=basketSess!==null&&basketSess instanceof basket_collection_1.SessionBasket;return result;}initSessionBasket(keepExisting){let result=false;try{}catch(err){console.log('setSessionBasket :: err ::',err);result=false;}return result;}getHighestBidder(offerData){let highVendor=null;offerData.vendors=pvar_utils_1.PVarUtils.isNullOrUndefined(offerData.vendors)?new Array():offerData.vendors;for(let i=0;i<offerData.vendors.length;i++){let vendor=offerData.vendors[i];if(!vendor.accepted){console.log('NOT ACCEPTED');continue;}if(highVendor===null){highVendor=vendor;}let highOffer=parseFloat(highVendor.offer);let vendorOffer=parseFloat(vendor.offer);if(vendorOffer>highOffer){highVendor=vendor;}}return highVendor;}getVendorBasket(vendorId){let result=null;for(let i=0;i<this.sessionBasket.data.length;i++){let basket=this.sessionBasket.data[i];if(basket.vendorId===vendorId){result=basket;break;}}if(result===null){result=new basket_model_1.VendorBasketModel(vendorId);this.sessionBasket.data.push(result);}return result;}addToVendorBasket(item){let basket=this.getVendorBasket(item.vendorId);let existingItem=basket.items.find(o=>o.code===item.code);if(typeof existingItem==='object'){existingItem.count++;}else{basket.items.push(item);}return true;}addToBasket(code,offerData){let scope=this;let vendorBaskets=this.getSessionBasket();let highVendor=null;let highBidItem=null;for(let i=0;i<offerData.vendors.length;i++){let vendor=offerData.vendors[i];if(!vendor.accepted){console.log('NOT ACCEPTED');continue;}let vendorOffer=parseFloat(vendor.offer);let resultItem=new basket_item_model_1.BasketItem(prand_num_1.PRandNum.randomNum(),code,vendor.vendorId,vendor.title,vendorOffer);this.addToVendorBasket(resultItem);if(highVendor===null){highVendor=vendor;highBidItem=resultItem;}let highOffer=parseFloat(highVendor.offer);if(vendorOffer>highOffer){highVendor=vendor;highBidItem=resultItem;}}console.log('1 ::');let bestBasket=this.getBestBasket();console.log('2 ::');let addResult=new basket_add_result_1.BasketAddResult(highBidItem!==null,highBidItem,bestBasket);console.log('3 ::');this.setSessionBasket();console.log('BASKETS ::',this.sessionBasket);this.echoDebug();return addResult;}getBasketTotal(basket){let total=0;for(let index in basket.items){let item=basket.items[index];total=total+item.offer;}return total;}getBestBasket(){let vendorBaskets=this.getSessionBasket();let bestTotal=0;let bestBaset=null;console.log('getBestBasket ::',bestBaset);for(let index in vendorBaskets.data){let basket=vendorBaskets.data[index];let total=this.getBasketTotal(basket);if(total>bestTotal){bestTotal=total;bestBaset=basket;}}return bestBaset;}addProductInfoToSession(code){let scope=this;let sessionBasket=this.getSessionBasket();console.log('%%%%% ::: sessionBasket :::',sessionBasket);let data=sessionBasket.productData;console.log('%%%%% ::: sessionBasket.productData :::',sessionBasket.productData);if(!data){scope.sessionBasket.productData=new Array();scope.setSessionBasket();}function haveProductData(code){for(let index in data){let prod=data[index];if(prod.code===code){return true;}}return false;}return new Promise((resolve,reject)=>{if(haveProductData(code)){resolve(true);}else{let prodApi=new product_api_controller_1.ProductApiController();return prodApi.getProduct(code).then(res=>{scope.sessionBasket.productData.push(res);scope.setSessionBasket();resolve(true);}).catch(err=>{resolve(false);});}});}apiDeleteBasketItem(req,resp){let data=req.body;let code=data.code;let basket=this.getSessionBasket();let prodIdx=basket.productData.indexOf(basket.productData.find(i=>i.code===code));if(pvar_utils_1.PVarUtils.isNumber(prodIdx)){basket.productData.splice(prodIdx,1);}for(let vendorBasket of basket.data){let itemIdx=vendorBasket.items.indexOf(vendorBasket.items.find(i=>i.code===code));if(pvar_utils_1.PVarUtils.isNumber(itemIdx)){vendorBasket.items.splice(itemIdx,1);if(vendorBasket.items.length===0){vendorBasket=null;}}}basket.data=basket.data.filter(vendorBasket=>{return vendorBasket!==null&&vendorBasket.items.length>0;});this.setSessionBasket(basket);this.apiPullSession(req,resp);console.log('NEW BASKET :: DELETE ::',basket);console.log('DELETE ::',code);}apiAddBasketItem(req,resp){let scope=this;let result;this.reqSession=req.session;let data=req.body;let code=data.code;console.log('%%%%% ::: Add TO BASKET');function doAdd(){return __awaiter(this,void 0,void 0,function*(){let addRes=yield scope.addProductInfoToSession(code);console.log('%%%%% ::: addRes :::',addRes);let searchResult=yield scope.callSearchService(code);console.log('%%%%% ::: searchResult :::',searchResult);result=scope.addToBasket(code,searchResult);result.prodData=scope.sessionBasket.productData;console.log('%%%%% ::: scope.sessionBasket.productData ::',scope.sessionBasket.productData);console.log('%%%%% ::: scope.addToBasket ::',result);console.log('%%%%% ::: apiAddBasketItem ::',scope.sessionBasket);});}doAdd().then(()=>{resp.setHeader('Content-Type','application/json');console.log('%%%%% ::: Result ::',result);resp.json(result);}).catch(err=>{controller_utils_1.ApiControllerUtils.internalError(resp);cli_logger_1.Logger.logError('SearchWsApiController :: error ::',err);});}apiGetBasket(req,resp){this.reqSession=req.session;let basketResult=new zap_basket_model_1.ZapBasketData();resp.setHeader('Content-Type','application/json');resp.end(JSON.stringify(basketResult));}apiBasketReview(req,resp,next){try{let sessionPullResult=new session_pull_result_1.SessionPullResult(true);let sessionBasket=this.getSessionBasket();sessionPullResult.data=sessionBasket.data;sessionPullResult.productData=sessionBasket.productData;resp.setHeader('Content-Type','application/json');resp.end(JSON.stringify(sessionPullResult));}catch(err){cli_logger_1.Logger.logError('apiBasketReview ::',err);next(err);}}apiClearBasket(req,resp,next){try{}catch(ex){cli_logger_1.Logger.logError('pullSessionBasket :: error ::',ex);}}apiPullSession(req,resp){resp.setHeader('Content-Type','application/json');try{let sessionBasket=this.getSessionBasket();console.log('\xA4 apiPullSession ::',sessionBasket);let bestBasket=this.getBestBasket();console.log('\xA4 bestBasket ::',bestBasket);let sessionPullResult=new session_pull_result_1.SessionPullResult(true);console.log('\xA4 sessionPullResult ::',sessionPullResult);try{let tmpSessionBasket=new basket_collection_1.SessionBasket();console.log('\xA4 1 > tmpSessionBasket ::',tmpSessionBasket);tmpSessionBasket.productData=sessionBasket.productData;console.log('\xA4 2 > tmpSessionBasket.productData ::',tmpSessionBasket.productData);let bestBasketResult=bestBasket;console.log('\xA4 3 > bestBasketResult ::',bestBasketResult);if(bestBasketResult!==null){console.log('\xA4 3:a > bestBasketResult !== null');tmpSessionBasket.data.push(bestBasketResult);}else{console.log('\xA4 3:b > bestBasketResult !== null');}sessionPullResult.productData=tmpSessionBasket.productData;sessionPullResult.data=tmpSessionBasket.data;}catch(err){sessionPullResult.success=false;}resp.setHeader('Content-Type','application/json');resp.end(JSON.stringify(sessionPullResult));}catch(ex){cli_logger_1.Logger.logError(`apiPullSession :: `,ex);controller_utils_1.ApiControllerUtils.bogusError(resp,'GraphQL Error: 478');}}attachWSS(wss){wss.onMessage(message=>{if(message.id===zap_message_types_1.ZapMessageType.BasketGet){}});}initRoutes(routes){routes.get(api_routes_1.ApiRoutes.Basket.GET_BASKET,this.apiGetBasket.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_ADD,this.apiAddBasketItem.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_DELETE,this.apiDeleteBasketItem.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_CLEAR,this.apiClearBasket.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_REVIEW,this.apiBasketReview.bind(this));routes.post(api_routes_1.ApiRoutes.Basket.POST_BASKET_SESS_PULL,this.apiPullSession.bind(this));}doSearch(code){let url=zappy_app_settings_1.Settings.PriceServiceApi.Endpoint+'/'+code;return new Promise((resolve,reject)=>{phttp_client_1.PHttpClient.getHttp(url).then(res=>{cli_logger_1.Logger.logGreen('PriceSearchService :: doSearch :: success ::',res);resolve(res);}).catch(err=>{cli_logger_1.Logger.logGreen('PriceSearchService :: doSearch :: error ::',err);reject(err);});});}callSearchService(code){cli_logger_1.Logger.logGreen('callSearchService');let url=zappy_app_settings_1.Settings.PriceServiceApi.Endpoint;return new Promise((resolve,reject)=>{return this.doSearch(code).then(searchResult=>{console.log('callSearchService :: doSearch ::',searchResult);resolve(null);}).catch(err=>{console.log('callSearchService :: error ::',err);resolve(err);});});}}exports.BasketApiController=BasketApiController;