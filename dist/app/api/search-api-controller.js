'use strict';Object.defineProperty(exports,'__esModule',{value:true});const cli_logger_1=require('../cli/cli.logger');const zappy_app_settings_1=require('../zappy.app.settings');const product_db_1=require('../../database/product-db');const barcode_parser_1=require('../../lib/topzap-utils-lib/barcode-parser');const controller_utils_1=require('./controller.utils');const price_search_service_1=require('../core/price-search-engine/price.search-service');const cli_commander_1=require('../cli/cli.commander');class SearchApiController{constructor(){this.productDb=new product_db_1.ProductDb();this.searchEngine=new price_search_service_1.PriceSearchService();}initRoutes(routes){this.webRoutes=routes;let scope=this;let extendedProdData=true;routes.post('/code2',(req,resp)=>{let data=req.body;let reqCode=data.ean;let fullResult=!data.cache;let debug=data.debug;cli_logger_1.Logger.logGreen('Given Barcode:',data);reqCode=barcode_parser_1.BarcodeParser.prepEan13Code(reqCode,true);cli_logger_1.Logger.logGreen('Prepared Barcode:',reqCode);this.productDb.getProductOffers(reqCode,fullResult,extendedProdData,debug).then(result=>{if(result.product!=null){cli_logger_1.Logger.logGreen('Product found:',result.product.title);resp.json(result);}else{resp.json(new Error('Not found'));}}).catch(error=>{cli_logger_1.Logger.logError('Error in test',error);});});routes.post('/code',(req,resp)=>{console.log('I AM HERE!!!!');let data=req.body;let reqCode=data.code;let fullResult=!data.cache;let debug=data.debug;cli_logger_1.Logger.logGreen('Given Barcode:',data);reqCode=barcode_parser_1.BarcodeParser.prepEan13Code(reqCode,true);cli_logger_1.Logger.logGreen('Prepared Barcode:',reqCode);scope.callSearchService(reqCode).then(searchRes=>{console.log('SEARCH RESULT ::',searchRes);}).catch(err=>{controller_utils_1.ControllerUtils.internalError(resp);cli_logger_1.Logger.logError('SearchApiController :: error ::',err);});});this.webRoutes.get('/code/:code',this.doDebugSearch.bind(this));}doDebugSearch(req,resp){let code='819338020068';this.callSearchService(code).then(searchRes=>{console.log('SEARCH RESULT ::',searchRes);}).catch(err=>{controller_utils_1.ControllerUtils.internalError(resp);cli_logger_1.Logger.logError('SearchApiController :: error ::',err);});}callSearchService(code){return new Promise((resolve,reject)=>{let url=zappy_app_settings_1.Settings.PriceServiceApi.Endpoint;this.searchEngine.doSearch(code).then(searchResult=>{}).catch(err=>{});});}}exports.SearchApiController=SearchApiController;if(cli_commander_1.CliCommander.debug()){let app=new SearchApiController();app.doDebugSearch(null,null);}