'use strict';Object.defineProperty(exports,'__esModule',{value:true});const miner_status_1=require('../miner/miner-status');const express=require('express');const express_1=require('express');const bodyParser=require('body-parser');const cookieParser=require('cookie-parser');const session=require('express-session');const database_manager_1=require('../lib/putte-db/database-manager');const cli_logger_1=require('./cli/cli.logger');const miner_api_controller_1=require('./api/miner-api-controller');const product_db_1=require('../database/product-db');const service_api_controller_1=require('./api/service-api.controller');const cli_commander_1=require('./cli/cli.commander');const search_api_controller_1=require('./api/search-api.controller');const product_api_controller_1=require('./api/product-api.controller');const zyn_session_1=require('../lib/zynaptic-igniter/zyn.session');const basket_controller_1=require('./products/basket.controller');class ZapApp{constructor(includeMinerApi=false){this.includeMinerApi=includeMinerApi;this.port=8080;this.webRoutes=express_1.Router();this.apiControllers=new Array();this.webApp=express();this.webApp.use(this.webRoutes);this.db=new database_manager_1.DbManager();this.productDb=new product_db_1.ProductDb();console.log(' ');console.log(' ');console.log('>> webApp.routes',this.webApp.routes);console.log('>> TYPE :: webApp.routes',typeof this.webApp.routes);console.log(' ');console.log('>> webRoutes',this.webRoutes);console.log('>> TYPE :: webRoutes.routes',typeof this.webRoutes);console.log(' ');console.log(' ');this.init();}getVersion(){return'ZapApp-Node-API/1.6.5';}getSecret(){return'ZapApp-Node-API/WillyW0nka';}registerMiddleware(){const middleware=this.webAppMiddleware;const routes=this.webRoutes;middleware.push(new zyn_session_1.ZynSession());for(let index in middleware){let zynMiddleware=middleware[index];zynMiddleware.initRoutes(routes);}}test(barcode){return new Promise((resolve,reject)=>{this.productDb.getProductOffers(barcode,false,false).then(result=>{resolve(result);}).catch(error=>{cli_logger_1.Logger.logError('Error in test',error);});});}initControllers(){const routes=this.webRoutes;const controllers=this.apiControllers;controllers.push(new search_api_controller_1.SearchApiController());controllers.push(new service_api_controller_1.ServiceApiController());controllers.push(new product_api_controller_1.ProductApiController());controllers.push(new miner_api_controller_1.MinerApiController());controllers.push(new basket_controller_1.BasketApiController());for(let index in controllers){let controller=controllers[index];controller.initRoutes(routes);}}configureWebServer(){let routes=this.webRoutes;this.webApp.set('view engine','ejs');function genuuid(){console.log('Generate ID::::');return'uidSafe(18)';}let sessionSettings={secret:this.getSecret(),genid:req=>{return genuuid();},saveUninitialized:true,cookie:{secure:false}};routes.use(session({secret:'keyboard cat',cookie:{maxAge:60000}}));routes.use(cookieParser());routes.use(bodyParser.json());routes.use(bodyParser.urlencoded({extended:true}));routes.use(function(req,res,next){res.header('Access-Control-Allow-Origin','*');res.header('Access-Control-Allow-Headers','Origin, X-Requested-With, Content-Type, Accept');next();});}init(){const routes=this.webRoutes;this.configureWebServer();this.initControllers();routes.get('/test',function(req,res){console.log('TypeOf Session ::',typeof req.session);if(req.session.basket){req.session.basket.itemCount++;res.setHeader('Content-Type','text/html');res.write('<p>views: '+req.session.basket.itemCount+'</p>');res.write('<p>expires in: '+req.session.cookie.maxAge/1000+'s</p>');res.end();}else{req.session.basket={type:'basket',itemCount:0};res.end('welcome to the session demo. refresh! :: '+req.session.basket.itemCount);}});routes.get('/minerstats',(req,res)=>{let stat=new miner_status_1.MinerStatus();stat.getProgressInfo().then(data=>{console.log(data);res.render('pages/minerstats',{progData:data});});});this.webApp.use(express.static('public'));this.webApp.get('/res/:filename',(req,res)=>{let filename=req.params.code;console.log('Get file',filename);});this.webApp.listen(this.port);console.log(`Listening on localhost: ${this.port}`);}}exports.ZapApp=ZapApp;if(cli_commander_1.CliCommander.debug()){let minerApi=true;let app=new ZapApp(minerApi);}