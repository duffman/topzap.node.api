'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const cli_logger_1=require('../cli/cli.logger');const basket_item_model_1=require('../zap-ts-models/basket-item.model');const basket_model_1=require('../zap-ts-models/basket.model');const zap_offer_model_1=require('../zap-ts-models/zap-offer.model');const basket_add_result_1=require('../zap-ts-models/basket-add-result');const basket_collection_1=require('../zap-ts-models/basket-collection');const zap_basket_model_1=require('../zap-ts-models/zap-basket.model');const price_search_service_1=require('../core/price-search-engine/price.search-service');const zappy_app_settings_1=require('../zappy.app.settings');const controller_utils_1=require('../api/controller.utils');const product_api_controller_1=require('../api/product-api.controller');const prand_num_1=require('../../lib/putte-ts/prand-num');const pvar_utils_1=require('../../lib/putte-ts/pvar-utils');const session_pull_result_1=require('../zap-ts-models/session-pull-result');class BasketApiController{constructor(){this.searchService=new price_search_service_1.PriceSearchService();}echoDebug(){for(let i=0;i<this.sessionBasket.data.length;i++){let basket=this.sessionBasket.data[i];console.log('Vendor :: '+basket.vendorId,basket.items);}}getSessionBasket(){try{if(this.reqSession.sessionBasket){this.sessionBasket=this.reqSession.sessionBasket;console.log('SESSION BASKET ::',this.sessionBasket);}else{this.reqSession.sessionBasket=new basket_collection_1.SessionBasket();this.sessionBasket=this.reqSession.sessionBasket;}return this.sessionBasket;}catch(ex){return null;}}setSessionBasket(basket=null){try{if(basket===null){basket=this.sessionBasket;}this.reqSession.sessionBasket=basket;}catch(err){console.log('setSessionBasket :: err ::',err);return false;}return true;}getHighestBidder(offerData){let highVendor=null;for(let i=0;i<offerData.vendors.length;i++){let vendor=offerData.vendors[i];if(!vendor.accepted){console.log('NOT ACCEPTED');continue;}if(highVendor===null){highVendor=vendor;}let highOffer=parseFloat(highVendor.offer);let vendorOffer=parseFloat(vendor.offer);if(vendorOffer>highOffer){highVendor=vendor;}}return highVendor;}getVendorBasket(vendorId){let result=null;for(let i=0;i<this.sessionBasket.data.length;i++){let basket=this.sessionBasket.data[i];if(basket.vendorId===vendorId){result=basket;break;}}if(result===null){result=new basket_model_1.VendorBasketModel(vendorId);this.sessionBasket.data.push(result);}return result;}addToVendorBasket(item){let basket=this.getVendorBasket(item.vendorId);let existingItem=basket.items.find(o=>o.code===item.code);if(typeof existingItem==='object'){existingItem.count++;}else{basket.items.push(item);}return true;}addToBasket(code,offerData){let scope=this;let vendorBaskets=this.getSessionBasket();let highVendor=null;let highBidItem=null;for(let i=0;i<offerData.vendors.length;i++){let vendor=offerData.vendors[i];if(!vendor.accepted){console.log('NOT ACCEPTED');continue;}let vendorOffer=parseFloat(vendor.offer);let resultItem=new basket_item_model_1.BasketItem(prand_num_1.PRandNum.randomNum(),code,vendor.vendorId,vendor.title,vendorOffer);this.addToVendorBasket(resultItem);if(highVendor===null){highVendor=vendor;highBidItem=resultItem;}let highOffer=parseFloat(highVendor.offer);if(vendorOffer>highOffer){highVendor=vendor;highBidItem=resultItem;}}console.log('1 ::');let bestBasket=this.getBestBasket();console.log('2 ::');let addResult=new basket_add_result_1.BasketAddResult(highBidItem!==null,highBidItem,bestBasket);console.log('3 ::');this.setSessionBasket();console.log('BASKETS ::',this.sessionBasket);this.echoDebug();return addResult;}getBasketTotal(basket){let total=0;for(let index in basket.items){let item=basket.items[index];total=total+item.offer;}return total;}getBestBasket(){let vendorBaskets=this.getSessionBasket();let bestTotal=0;let bestBaset=null;console.log('getBestBasket ::',bestBaset);for(let index in vendorBaskets.data){let basket=vendorBaskets.data[index];let total=this.getBasketTotal(basket);if(total>bestTotal){bestTotal=total;bestBaset=basket;}}return bestBaset;}addProductInfoToSession(code){let scope=this;let sessionBasket=this.getSessionBasket();console.log('%%%%% ::: sessionBasket :::',sessionBasket);let data=sessionBasket.productData;console.log('%%%%% ::: sessionBasket.productData :::',sessionBasket.productData);if(!data){scope.sessionBasket.productData=new Array();scope.setSessionBasket();}function haveProductData(code){for(let index in data){let prod=data[index];if(prod.code===code){return true;}}return false;}return new Promise((resolve,reject)=>{if(haveProductData(code)){resolve(true);}else{let prodApi=new product_api_controller_1.ProductApiController();return prodApi.getProduct(code).then(res=>{scope.sessionBasket.productData.push(res);scope.setSessionBasket();resolve(true);}).catch(err=>{resolve(false);});}});}findItemByZid(){}apiDeleteBasketItem(req,resp){let data=req.body;let code=data.code;let basket=this.getSessionBasket();let prodIdx=basket.productData.indexOf(basket.productData.find(i=>i.code===code));if(pvar_utils_1.PVarUtils.isNumber(prodIdx)){basket.productData.splice(prodIdx,1);}for(let vendorBasket of basket.data){let itemIdx=vendorBasket.items.indexOf(vendorBasket.items.find(i=>i.code===code));if(pvar_utils_1.PVarUtils.isNumber(itemIdx)){vendorBasket.items.splice(itemIdx,1);if(vendorBasket.items.length===0){vendorBasket=null;}}}this.setSessionBasket(basket);this.apiPullSession(req,resp);console.log('NEW BASKET :: DELETE ::',basket);console.log('DELETE ::',code);}apiAddBasketItem(req,resp){let scope=this;let result;this.reqSession=req.session;let data=req.body;let code=data.code;console.log('%%%%% ::: Add TO BASKET');function doAdd(){return __awaiter(this,void 0,void 0,function*(){let addRes=yield scope.addProductInfoToSession(code);console.log('%%%%% ::: addRes :::',addRes);let searchResult=yield scope.callSearchService(code);console.log('%%%%% ::: searchResult :::',searchResult);result=scope.addToBasket(code,searchResult);result.prodData=scope.sessionBasket.productData;console.log('%%%%% ::: scope.sessionBasket.productData ::',scope.sessionBasket.productData);console.log('%%%%% ::: scope.addToBasket ::',result);console.log('%%%%% ::: apiAddBasketItem ::',scope.sessionBasket);});}doAdd().then(()=>{resp.setHeader('Content-Type','application/json');console.log('%%%%% ::: Result ::',result);resp.json(result);}).catch(err=>{controller_utils_1.ApiControllerUtils.internalError(resp);cli_logger_1.Logger.logError('SearchApiController :: error ::',err);});}apiGetBasket(req,resp){this.reqSession=req.session;let basketResult=new zap_basket_model_1.ZapBasketData();resp.setHeader('Content-Type','application/json');resp.end(JSON.stringify(basketResult));}apiPullSession(req,resp){try{let sessionBasket=this.getSessionBasket();let bestBasket=this.getBestBasket();let sessionPullResult=new session_pull_result_1.SessionPullResult(true);try{let tmpSessionBasket=new basket_collection_1.SessionBasket();tmpSessionBasket.productData=sessionBasket.productData;let bestBasketResult=bestBasket;if(bestBasketResult!==null){tmpSessionBasket.data.push(bestBasketResult);}sessionPullResult.productData=tmpSessionBasket.productData;sessionPullResult.data=tmpSessionBasket.data;}catch(err){sessionPullResult.success=false;}resp.setHeader('Content-Type','application/json');resp.end(JSON.stringify(sessionPullResult));}catch(ex){controller_utils_1.ApiControllerUtils.bogusError(resp,'GraphQL Error: 478');}}initRoutes(routes){routes.get('/basket',this.apiGetBasket.bind(this));routes.post('/basket/add',this.apiAddBasketItem.bind(this));routes.post('/basket/del',this.apiDeleteBasketItem.bind(this));routes.post('/basket/pull',this.apiPullSession.bind(this));}callSearchService(code){cli_logger_1.Logger.logGreen('callSearchService');let url=zappy_app_settings_1.Settings.PriceServiceApi.Endpoint;return new Promise((resolve,reject)=>{return this.searchService.doDebugSearch(code).then(searchResult=>{console.log('callSearchService :: doSearch ::',searchResult);let result=zap_offer_model_1.ZapOfferResult.toZapRes(searchResult);resolve(result);}).catch(err=>{console.log('callSearchService :: error ::',err);resolve(err);});});}}exports.BasketApiController=BasketApiController;