'use strict';Object.defineProperty(exports,'__esModule',{value:true});const db_kernel_1=require('../lib/putte-db/db-kernel');const dynsql_1=require('../lib/putte-db/dynsql/dynsql');const sql_string_1=require('../lib/putte-db/dynsql/sql-string');const cli_logger_1=require('../app/cli/cli.logger');const miner_session_model_1=require('./miner-session-model');const miner_session_model_2=require('./miner-session-model');const session_guid_1=require('../lib/utils/session-guid');const base64_1=require('../lib/utils/base64');class MinerDb{constructor(){this.db=new db_kernel_1.DbManager();this.init();let dynQuery=new dynsql_1.DynSQL();let data={name:String('mitt namn'),type:12};let sql=dynQuery.insert(data,'product_vendors').toSQL();console.log('SQL ::',sql);}init(){}haveMinerSession(vendorId){let sql=`SELECT count(*) AS count FROM price_miner_session WHERE vendor_id=${vendorId}`;return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{let dbRow=dbRes.safeGetFirstRow();let haveSession=dbRow.getValAsInt('count')>0;resolve(haveSession);}).catch(error=>{cli_logger_1.Logger.logError('getMinerSession :: error ::',error);reject(error);});});}getWorkQueue(sessionId,size=-1){function prepBarcode(barcode){return barcode;}let sql=`SELECT * FROM price_miner_queue WHERE session_id=${sessionId} AND processed_when IS NULL ORDER BY RAND()`;if(size>-1){sql=sql+` LIMIT ${size}`;}return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{let result=new Array();for(let i=0;i<dbRes.result.rowCount();i++){let dbRow=dbRes.result.dataRows[i];let model=new miner_session_model_1.MinerWorkItem(dbRow.getValAsInt('id'),prepBarcode(dbRow.getValAsStr('barcode')));result.push(model);}resolve(result);}).catch(error=>{cli_logger_1.Logger.logError('getWorkQueue :: error ::',error);reject(error);});});}checkOutWorkQueue(sessionId,size=10){let scope=this;return new Promise((resolve,reject)=>{scope.getWorkQueue(sessionId,size).then(workItems=>{let idList=new Array();for(let i=0;i<workItems.length;i++){let item=workItems[i];let entry=`id=${item.id}`;idList.push(entry);}let sql='UPDATE price_miner_queue SET checkout_time=NOW() WHERE '+idList.join(' OR ');console.log(sql);scope.db.dbQuery(sql).then(res=>{resolve(res);}).catch(err=>{reject(err);});});});}addVendor(name,type=-1){let dynQuery=new dynsql_1.DynSQL();let data={name:name,type:type};let sql=dynQuery.insert(data,'product_vendors').toSQL();console.log('ADD VENDOR SQL >> ',sql);return new Promise((resolve,reject)=>{});}updateWorkQueue(item){let scope=this;let dynQuery=new dynsql_1.DynSQL();dynQuery.update('price_miner_queue');dynQuery.set('accepted',item.accepted);dynQuery.set('price',item.price);dynQuery.set('title',item.title);dynQuery.set('processed_when',item.price,false);dynQuery.set('message',item.message);dynQuery.where('price_miner_queue.id',item.id);let base64=new base64_1.Base64();let message=sql_string_1.default.escapeString(item.message);let sql=`UPDATE price_miner_queue SET `+`accepted=${item.accepted}, `;sql=sql+`title='${item.title}', `;let strPrice=''+item.price;if(strPrice.length>0)sql=sql+`price='${item.price}', `;sql=sql+`processed_when=NOW(), `+`message=${message} `+`WHERE id=${item.id} AND session_id=${item.sessionId}`;cli_logger_1.Logger.logGreen('updateWorkQueue :: sql ::',sql);return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{resolve(dbRes);}).catch(error=>{reject(error);});});}getMinerSession(vendorId){let sql=`SELECT * FROM price_miner_session WHERE vendor_id=${vendorId} AND completed IS NULL`;return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{let dbRow=dbRes.safeGetFirstRow();console.log('dbRow',dbRow);if(dbRow.count()>0){let model=new miner_session_model_2.MinerSessionModel(dbRow.getValAsInt('id'),dbRow.getValAsStr('session_key'),dbRow.getValAsStr('miner_name'),dbRow.getValAsStr('created'),dbRow.getValAsInt('vendor_id'),dbRow.getValAsInt('completed'));resolve(model);}else{reject(new Error('Empty result set'));}}).catch(error=>{cli_logger_1.Logger.logError('getMinerSession :: error ::',error);reject(error);});});}createMinerSession(vendorId,minerName='<noname>'){let sql=`INSERT INTO price_miner_session (session_key, vendor_id, miner_name, created) `+`VALUES ("${session_guid_1.Guid.newGuid()}", ${vendorId}, "${minerName}", NOW())`;console.log('SQL',sql);return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{resolve(dbRes);}).catch(error=>{cli_logger_1.Logger.logError('createMinerSession',error);reject(error);});});}setSessionDone(sessionId,vendorId){let sql=`UPDATE price_miner_session SET completed=NOW() WHERE id=${sessionId} AND vendor_id=${vendorId} AND completed IS NULL`;return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{let success=dbRes.affectedRows>0;resolve(success);}).catch(error=>{cli_logger_1.Logger.logError('setSessionDone',error);reject(error);});});}createMinerQueue(sessionId){let sql=`INSERT INTO price_miner_queue (session_id, barcode) SELECT ${sessionId}, barcode FROM product_edition`;return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{let success=dbRes.affectedRows>0;resolve(success);}).catch(error=>{cli_logger_1.Logger.logError('Error createMinerQueue',error);reject(error);});});}}exports.MinerDb=MinerDb;