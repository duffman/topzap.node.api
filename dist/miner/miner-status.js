'use strict';Object.defineProperty(exports,'__esModule',{value:true});const cli_logger_1=require('../app/cli/cli.logger');const db_kernel_1=require('../lib/putte-db/db-kernel');const dynsql_1=require('../lib/putte-db/dynsql/dynsql');class ProgressRec{constructor(totalCount,successCount,processedCount){this.totalCount=totalCount;this.successCount=successCount;this.processedCount=processedCount;}}exports.ProgressRec=ProgressRec;class MinerStatucRec{constructor(sessionId,minerName,vendorId,sessionKey,completed,totalCount,successCount,processedCount,percentDone){this.sessionId=sessionId;this.minerName=minerName;this.vendorId=vendorId;this.sessionKey=sessionKey;this.completed=completed;this.totalCount=totalCount;this.successCount=successCount;this.processedCount=processedCount;this.percentDone=percentDone;}}exports.MinerStatucRec=MinerStatucRec;class MinerStatus{constructor(){this.db=new db_kernel_1.DbManager();}getSessionInfo(){let dynSql=new dynsql_1.DynSQL();let sql=dynSql.select('ms.id','ms.session_key','ms.completed','pv.id AS pv_id','pv.name').from('price_miner_session','ms').from('product_vendors','pv').where('pv.id','ms.vendor_id',false).toSQL();console.log(sql);return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{resolve(dbRes);}).catch(error=>{cli_logger_1.Logger.logError('getMinerSession :: error ::',error);reject(error);});});}getProgressInfo(){let scope=this;let result=new Array();function getSessionDbRes(){return new Promise((resolve,reject)=>{return scope.getSessionInfo().then(dbRes=>{resolve(dbRes);}).catch(error=>{cli_logger_1.Logger.logError('getMinerSession :: error ::',error);reject(error);});});}function getSessionProg(sessionId){let sql=`SELECT (SELECT COUNT(*) FROM price_miner_queue WHERE session_id = ${sessionId}) AS totalCount,
			(SELECT COUNT(*) FROM price_miner_queue WHERE session_id = ${sessionId} AND processed_when IS NOT NULL AND price > -1) AS successCount,
			(SELECT COUNT(*) FROM price_miner_queue WHERE session_id = ${sessionId} AND processed_when IS NOT NULL) AS processedCount`;return new Promise((resolve,reject)=>{return scope.db.dbQuery(sql).then(dbRes=>{let row=dbRes.safeGetFirstRow();let result=new ProgressRec(row.getValAsNum('totalCount'),row.getValAsNum('successCount'),row.getValAsNum('processedCount'));resolve(result);}).catch(error=>{cli_logger_1.Logger.logError('getMinerSession :: error ::',error);reject(error);});});}async function getInfo(){let sessionInfo=await getSessionDbRes();for(let i=0;i<sessionInfo.result.rowCount();i++){let row=sessionInfo.result.dataRows[i];let sessId=row.getValAsNum('id');let name=row.getValAsStr('name');let vendorId=row.getValAsNum('pv_id');let sessKey=row.getValAsStr('session_key');let completed=row.getValAsStr('completed');let progRec=await getSessionProg(sessId);let percentDone=progRec.processedCount/progRec.totalCount*100;let statusRec=new MinerStatucRec(sessId,name,vendorId,sessKey,completed,progRec.totalCount,progRec.successCount,progRec.processedCount,percentDone);result.push(statusRec);}}return new Promise((resolve,reject)=>{getInfo().then(()=>{resolve(result);});});}}exports.MinerStatus=MinerStatus;