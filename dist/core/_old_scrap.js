'use strict';var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator['throw'](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};Object.defineProperty(exports,'__esModule',{value:true});const express=require('express');const product_model_1=require('../models/product-model');const database_manager_1=require('../database/database-manager');const vendor_model_1=require('../models/vendor-model');const vendor_list_1=require('../models/vendor-list');const search_result_1=require('../models/search-result');const product_bid_model_1=require('../models/product-bid-model');const product_bid_list_1=require('../models/product-bid-list');const logger_1=require('../logger');class App{constructor(){this.port=8976;this.expressApp=express();this.db=new database_manager_1.DbManager();}getProductOffers(barcode){let result=new search_result_1.SearchResult();function getProduct(barcode){let sql=`SELECT games.* FROM games, product_edition AS edition WHERE edition.barcode='${barcode}' AND games.id = edition.game_id`;console.log('GET THE FUCKING PRODUCT!!!');return new Promise((resolve,reject)=>{return this.db.dbQuery(sql).then(dbRes=>{console.log('>>>>> 222');let dbRow=dbRes.safeGetFirstRow();console.log('GET TAAAA dscHE FUCKING PRODUCT!!!');let model=new product_model_1.ProductModel(dbRow.getValAsStr('id'),dbRow.getValAsStr('platform_name'),dbRow.getValAsStr('title'),dbRow.getValAsStr('publisher'),dbRow.getValAsStr('developer'),dbRow.getValAsStr('genre'),dbRow.getValAsStr('cover_image'),dbRow.getValAsStr('thumb_image'),dbRow.getValAsStr('video_source'),dbRow.getValAsStr('source'),dbRow.getValAsStr('release_date'));console.log('model',model);resolve(model);}).catch(error=>{console.log('ERROR:',error);reject(error);});});}function getVendors(){let result=new vendor_list_1.VendorList();let sql=`SELECT * FROM product_vendors`;return new Promise((resolve,reject)=>{this.db.dbQuery(sql).then(dbRes=>{for(let i=0;i<dbRes.result.rowCount();i++){let dbRow=dbRes.result.dataRows[i];let model=new vendor_model_1.VendorModel(dbRow.getValAsStr('id'),dbRow.getValAsStr('identifier'),dbRow.getValAsStr('vendor_type'),dbRow.getValAsStr('name'),dbRow.getValAsStr('description'),dbRow.getValAsStr('website_url'),dbRow.getValAsStr('logo_name'),'');result.addVendor(model);}resolve(result);}).catch(error=>{logger_1.Logger.logError('Error Gettings Vendors',error);reject(error);});});}function getBidList(barcode){let result=new product_bid_list_1.ProductBidList();let sql=`SELECT * FROM product_vendors`;return new Promise((resolve,reject)=>{this.db.dbQuery(sql).then(dbRes=>{for(let i=0;i<dbRes.result.rowCount();i++){let dbRow=dbRes.result.dataRows[i];let model=new product_bid_model_1.ProductBidModel(dbRow.getValAsStr('id'),dbRow.getValAsStr('vendor_id'),dbRow.getValAsStr('product_id'),dbRow.getValAsStr('barcode'),dbRow.getValAsStr('buy_price'),dbRow.getValAsStr('sell_price'));result.addBid(model);}resolve(result);}).catch(error=>{logger_1.Logger.logError('Error Gettings Vendors',error);reject(error);});});}function compileResult(){return __awaiter(this,void 0,void 0,function*(){let result=new search_result_1.SearchResult();try{console.log('Compile 1 -- Init');let product=yield getProduct(barcode);console.log('Compile 2',product);let vendors=yield getVendors();console.log('Compile 3',vendors);let bidList=yield getBidList(barcode);console.log('Compile 4',bidList);result.setProduct(product);result.setVendorList(vendors);result.setBidList(bidList);}catch(ex){result.setErrorMessage(ex.message);}});}return new Promise((resolve,reject)=>{compileResult().then(()=>{console.log('BULLE',result);resolve(result);logger_1.Logger.logGreen('FUCK THE FUCKING FUCKER');});});}test(barcode){return new Promise((resolve,reject)=>{this.getProductOffers(barcode).then(result=>{resolve(result);}).catch(error=>{logger_1.Logger.logError('Error in test',error);});});}init(){let model={};this.expressApp.get('/',(req,res)=>{});this.expressApp.listen(this.port);console.log(`Listening on localhost: ${this.port}`);}}exports.App=App;let app=new App();app.test('045496590451').then(result=>{console.log('RES',result);});