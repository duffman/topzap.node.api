'use strict';Object.defineProperty(exports,'__esModule',{value:true});const http=require('http');const socket_io_types_1=require('./socket-io.types');const igniter_event_types_1=require('./igniter-event.types');const events_1=require('events');const igniter_settings_1=require('../igniter.settings');const igniter_messages_1=require('../messaging/igniter-messages');const message_utils_1=require('../messaging/message-utils');const message_types_1=require('../messaging/message-types');const message_factory_1=require('../messaging/message-factory');const zyn_sio_session_1=require('./zyn-sio-session');class SocketEntry{constructor(sessionId,socket){this.sessionId=sessionId;this.socket=socket;}}exports.SocketEntry=SocketEntry;class SocketServer{constructor(createServer=true){this.serverPort=igniter_settings_1.IgniterSettings.DefSocketServerPort;this.eventEmitter=new events_1.EventEmitter();this.sessionSockets=new Array();if(createServer){this.createServer();}}findSocketBySessionId(sessId){let result;let entry=this.getSessionSocketEntry(sessId);if(entry!==null){result=entry.socket.session;}return result;}getSessionSocketEntry(sessId){let result=null;for(const entry of this.sessionSockets){if(entry.sessionId===sessId){result=entry;break;}}return result;}setSessionSocket(sessId,socket){let entry=this.getSessionSocketEntry(sessId);if(entry!==null){return false;}entry=new SocketEntry(sessId,socket);this.sessionSockets.push(entry);return true;}removeSessionSocket(sessId){let result=false;for(let i=0;i<this.sessionSockets.length;i++){let entry=this.sessionSockets[i];if(entry.sessionId===sessId){this.sessionSockets.splice(i,1);result=true;break;}}return result;}emitToSession(sessId,messageType,mess){let entry=this.getSessionSocketEntry(sessId);console.log('sendToSessionId :: sessId ::',sessId);if(entry===null){console.log(`Socket obj for session with id '${sessId}' not found!`);return false;}console.log('emitting :: socketId ::',entry.socket.id);entry.socket.emit(messageType,mess);return true;}sendToSessionId(sessId,mess){console.log('sendToSessionId ::',mess);return this.emitToSession(sessId,socket_io_types_1.IOTypes.SOCKET_IO_MESSAGE,mess);}sendToSession(session,mess){console.log('sendToSession ::',mess);return session.socket.emit(socket_io_types_1.IOTypes.SOCKET_IO_MESSAGE,mess);}sendError(sessId,id,data,tag=null){data=data===null?{}:data;let mess=message_factory_1.MessageFactory.newIgniterMessage(message_types_1.MessageType.Error,id,data,tag);return this.sendToSessionId(sessId,mess);}sessionError(session,id,data,tag){data=data===null?{}:data;let mess=message_factory_1.MessageFactory.newIgniterMessage(message_types_1.MessageType.Error,id,data,tag);return this.sendToSession(session,mess);}createServer(){let httpServer=http.createServer();httpServer.on('listening',()=>{console.log('IOServer Listening on port ::',this.serverPort);this.eventEmitter.emit(igniter_event_types_1.SocketEvents.ServerStarted,this.serverPort);});httpServer.on('error',err=>{console.log('IOServer Start Failed ::',err);this.eventEmitter.emit(igniter_event_types_1.SocketEvents.ServerStartError,err);});const io=require('socket.io')({serveClient:false});io.attach(httpServer,{pingInterval:10000,pingTimeout:5000,cookie:true});this.attachSocketIO(io);this.httpServer=httpServer;}attachSocketIO(socket){socket.on(socket_io_types_1.IOTypes.SOCKET_IO_CONNECTION,this.onConnect.bind(this));this.io=socket;}startListen(port=igniter_settings_1.IgniterSettings.DefSocketServerPort){this.httpServer.listen(port);}onConnect(socket){console.log('SERVER :: New Client Connected ::',socket.id);console.log('SERVER :: SESSION ID ::',socket.request.sessionID);this.setSessionSocket(socket.request.sessionID,socket);this.handleConnection(socket);}socketDisconnect(socket=null){console.log('SERVER->DISCONNECT :: SESSION ID ::',socket.request.sessionID);this.removeSessionSocket(socket.request.sessionID);this.eventEmitter.emit(igniter_event_types_1.SocketEvents.SocketDisconnect,socket);}handleConnection(socket){this.eventEmitter.emit(igniter_event_types_1.SocketEvents.NewConnection,socket);socket.on(socket_io_types_1.IOTypes.SOCKET_IO_DISCONNECT,()=>{this.socketDisconnect(socket);});socket.on(socket_io_types_1.IOTypes.SOCKET_IO_MESSAGE,data=>{console.log('<< SERVER :: NEW MESSAGE ::',data);this.handleMessage(data,socket);});}handleMessage(message,socket){let dataObj=message;try{if(typeof message==='string'){dataObj=JSON.parse(message);}if(message_utils_1.MessageUtils.validateMessageType(dataObj)===false){let errMessage='Invalid Message Type, does not conform to ZynMessage';this.eventEmitter.emit(igniter_event_types_1.SocketEvents.Error,errMessage,message);return;}}catch(ex){console.log('Error in handleMessage:: ',message);console.log('handleMessage parse failed:',ex);this.eventEmitter.emit(igniter_event_types_1.SocketEvents.Error,'handleMessage',ex);return;}let socketSession=new zyn_sio_session_1.ZynSioSession(socket);let igniterMessage=new igniter_messages_1.ZynMessage(dataObj.type,dataObj.id,dataObj.data,dataObj.tag);igniterMessage.socket=socket;this.eventEmitter.emit(igniter_event_types_1.SocketEvents.NewMessage,igniterMessage,socketSession);}onServerStarted(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.ServerStarted,listener);}onServerStartError(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.ServerStartError,listener);}onNewConnection(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.NewConnection,listener);}onDisconnect(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.SocketDisconnect,listener);}onEvent(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.NewEvent,listener);}onMessage(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.NewMessage,listener);}onError(listener){this.eventEmitter.addListener(igniter_event_types_1.SocketEvents.Error,listener);}}exports.SocketServer=SocketServer;