'use strict';Object.defineProperty(exports,'__esModule',{value:true});const net=require('net');class IPuppetServer{}exports.IPuppetServer=IPuppetServer;class PuppetServer{constructor(){let scope=this;this.server=net.createServer(client=>{console.log('Client connect. Client local address : '+client.localAddress+':'+client.localPort+'. client remote address : '+client.remoteAddress+':'+client.remotePort);client.setEncoding('utf-8');client.setTimeout(1000);client.on('data',function(data){console.log('Receive client send data : '+data+', data size : '+client.bytesRead);client.end('Server received data : '+data+', send back to client data size : '+client.bytesWritten);});client.on('end',()=>{console.log('Client disconnect.');scope.server.getConnections((err,count)=>{if(!err){console.log('There are %d connections now. ',count);}else{console.error(JSON.stringify(err));}});});client.on('timeout',function(){console.log('Client request time out. ');});});}startListening(){let scope=this;scope.server.listen(9999,()=>{let serverInfo=scope.server.address();let serverInfoJson=JSON.stringify(serverInfo);console.log('TCP server listen on address : '+serverInfoJson);scope.server.on('close',function(){console.log('TCP server socket is closed.');});scope.server.on('error',function(error){console.error(JSON.stringify(error));});});}}exports.PuppetServer=PuppetServer;const server=new PuppetServer();server.startListening();